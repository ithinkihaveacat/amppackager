# This is a TOML 0.4.0 file, as specified by https://github.com/toml-lang/toml.

# The port to listen on; 8080 is the default.
# Port = 8080

# Uncomment this line to serve only to localhost clients, e.g. for testing, by
# binding on the loopback interface.
# LocalOnly = true

# The path to the PEM file containing the full certificate chain, ordered from
# leaf to root.
#
# Typically, it would look like:
#   -----BEGIN CERTIFICATE-----
#   ....
#   -----END CERTIFICATE-----
#   -----BEGIN CERTIFICATE-----
#   ....
#   -----END CERTIFICATE-----
# where the first certificate is for your domain, and the second is your CA's
# cert.
#
# For development, it may be any certificate that has an OCSP URL in its
# Authority Information Access section (e.g. a TLS cert from Let's Encrypt).
# For production, it must meet the following requirements set by the Signed
# Exchanges specification:
#
#   The leaf certificate must use an EC P-256 key. (See https://goo.gl/pwK9EJ
#   item 3.1.5.) It must have at least one SCT, either as an X.509 extension or
#   as an extension to the OCSP responses from the URI mentioned in its Authority
#   Information Access extension. (See https://goo.gl/JQiyNs item 7.4.)
#
#   To limit the risk to your existing TLS traffic, your signed exchanges
#   certificate should be minted from a different private key than your TLS
#   certificate. See https://goo.gl/U4vasm for details.
#
# As of November 2018, DigiCert is the only provider of such certs:
#   https://www.digicert.com/account/ietf/http-signed-exchange.php
#
# To verify it has the right key type:
#   openssl x509 -in cert.pem -text | grep 'ASN1 OID: prime256v1'
# To verify it has the CanSignHttpExchanges extension:
#   openssl x509 -in cert.pem -text | grep 1.3.6.1.4.1.11129.2.1.22:
#
# This will be served at /amppkg/cert/blahblahblah, where "blahblahblah" is a
# stable unique identifier for the cert (currently, its base64-encoded
# SHA-256).
CertFile = './certs/alabiaga-dev/certfile.pem'

# The path to the PEM file containing the private key that corresponds to the
# leaf certificate in CertFile.
KeyFile = './certs/alabiaga-dev/keyfile.pem'

# The path to a file where the OCSP response will be cached. The parent
# directory should exist, but the file need not. A dedicated lock file will be
# created in the same directory as this file, sharing the same name but with
# extension .lock appended. The filesystem must support shared and exclusive
# locking; consider this especially when utilizing network-mounted storage.
OCSPCache = '/tmp/amppkg-ocsp'

# The list of request header names to be forwarded in a fetch request.
# Hop-by-hop headers, conditional request headers and Via cannot be included.
ForwardedRequestHeaders = []

Public = "./public"

# This is a simple level of validation, to guard against accidental
# misconfiguration of the reverse proxy that sits in front of the packager.
#
# You must specify at least one URLSet; you may specify multiple. Each one must
# specify a Sign pattern and may specify a Fetch pattern. When the packager
# receives a request for a package, it will first validate that the requested
# fetch/sign URL pair matches at least one of the given URLSets.
#[[URLSet]]
  # What URLs are allowed to show up in the browser's URL bar, when served from
  # the AMP Cache. By default, the URL that the frontend requests to sign is
  # also the URL where the packager fetches it. For extra flexibility, see
  # URLSet.Fetch below.
  #
  # To ask the packager to fetch/sign a specific URL, request it like this:
  #   /priv/doc/https://amppackageexample.com/
  # or this:
  #   /priv/doc?sign=https%3A%2F%2Famppackageexample.com%2F
  #
  # Note the need for the latter to be URL-escaped. Both options are provided,
  # depending on what's easier for your server software.
[[URLSet]]
  [URLSet.Sign]
    Domain = "alabiaga.dev"
    CertFile = './certs/alabiaga-dev/certfile.pem'
    KeyFile = './certs/alabiaga-dev/keyfile.pem'
